## ## ## ## [http://www.airs.com/blog/archives/38]
The compiler takes the humaan readable code and converts it into assembly. 
The assembler converts assembly to object files... and these object files are clubbed into one executable using a linker.

In the old days, when people used to handcraft assembly code, the assembler used to generate the executable file but when FORTRAN and COBOL came in everything changes and object files came into the play.

## The concept of shared libraries also came into role after SVR3 and after that SVR4 implemented the dynamic linking for more flexibility.


## ## ## ## [http://www.airs.com/blog/archives/39]

The linker operates on a small number of basic data types: symbols, relocations, and contents. These are defined in the input object files. 

Symbols are name and value pairs, the value being roughly the address of that variable. (the value you would get from the expression &my_global_var) [Defined symbols]

Undefined symbols point to some other symbol in any other object files.

During the linking process, the linker will assign an address to each defined symbol, and will resolve each undefined symbol by finding a defined symbol with the same name.

A relocation is a computation to perform on the contents.  A simple, and commonly used, relocation is “set this location in the contents to the value of this symbol plus this addend.”